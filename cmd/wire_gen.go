// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/ppd324/go-ddd-layout/app/application/services"
	"github.com/ppd324/go-ddd-layout/app/domain/service"
	"github.com/ppd324/go-ddd-layout/app/infra/database/gorm"
	"github.com/ppd324/go-ddd-layout/app/interfaces/http"
	"github.com/ppd324/go-ddd-layout/app/interfaces/http/handlers"
	"github.com/ppd324/go-ddd-layout/app/interfaces/http/router"
	"github.com/ppd324/go-ddd-layout/conf"
)

// Injectors from wire.go:

func CreateApp() (*http.HttpServer, error) {
	appConfig, err := conf.NewAppConfig()
	if err != nil {
		return nil, err
	}
	mysqlConfig := appConfig.Mysql
	db, err := gorm.New(mysqlConfig)
	if err != nil {
		return nil, err
	}
	orderRepo := gorm.NewOrderRepository(db)
	userRepo := gorm.NewUserRepository(db)
	productRepo := gorm.NewProductRepository(db)
	orderService := service.NewOrderService(orderRepo, userRepo, productRepo)
	servicesOrderService := services.NewOrderService(orderService)
	orderHandler := handlers.NewOrderHandler(servicesOrderService)
	orderRouter := router.NewOrderRouter(orderHandler)
	v := router.ProvideRouters(orderRouter)
	httpServer := http.NewHttpServer(appConfig, v)
	return httpServer, nil
}

// wire.go:

var ProviderSet = wire.NewSet(conf.ProviderSet, gorm.ProviderSet, service.ProviderSet, services.ProviderSet, handlers.ProviderSet, http.ProviderSet, router.ProviderSet)
